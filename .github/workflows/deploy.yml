name: Deployment Pipeline - Staging and Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

jobs:
  acceptance-tests:
    name: Acceptance Tests
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          echo "Environment: STAGING"
          echo "URL: https://staging.examen-ci-cd.vercel.app"
          # Simulación de deploy - en producción sería un deploy real
          sleep 10

      - name: Wait for deployment
        run: |
          echo "Waiting for staging deployment to be ready..."
          sleep 15

      - name: Run acceptance tests against staging
        run: |
          echo "Running acceptance tests against staging..."
          npm run test:acceptance
        env:
          BASE_URL: https://staging.examen-ci-cd.vercel.app

      - name: Upload acceptance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: acceptance-test-results
          path: playwright-report/
          retention-days: 30

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: acceptance-tests
    environment: production
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build

      - name: Blue-Green Deployment
        run: |
          echo "Blue-Green deployment Starting Blue-Green deployment..."
          echo "Current: Blue environment (production)"
          echo "Deploying: Green environment (new version)"

          # Simulación de Blue-Green deployment
          echo "1. Deploying to Green environment..."
          sleep 10

          echo "2. Running health checks on Green..."
          sleep 5

          echo "3. Switching traffic to Green..."
          sleep 5

          echo "4. Green environment is now live!"
          echo "5. Blue environment kept as rollback option"

      - name: Post-deployment tests
        run: |
          echo "🧪 Running post-deployment tests..."
          echo "Testing production endpoints..."
          # Simulación de tests post-deployment
          sleep 5
          echo "Rollback completed All post-deployment tests passed!"

      - name: Deployment success notification
        run: |
          echo "Production deployment successful Production deployment successful!"
          echo "Environment: PRODUCTION"
          echo "URL: https://examen-ci-cd.vercel.app"
          echo "Rollback available: Blue environment"

  # Job 3: Rollback Strategy
  rollback:
    name: Rollback Strategy
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Automatic Rollback
        run: |
          echo "🚨 Deployment failed! Initiating rollback..."
          echo "Switching back to Blue environment..."

          # Simulación de rollback automático
          sleep 5

          echo "Rollback completed Rollback completed successfully!"
          echo "Traffic switched back to Blue environment"
          echo "Production is stable again"

      - name: Rollback notification
        run: |
          echo "Rollback notification Rollback completed"
          echo "Previous stable version is now live"
          echo "Investigation required for failed deployment"

  # Job 4: Deployment Summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [acceptance-tests, deploy-production]
    if: always()

    steps:
      - name: Deployment Pipeline Summary
        run: |
          echo "## Deployment Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Completed Stages:" >> $GITHUB_STEP_SUMMARY
          echo "- **Acceptance Tests**: E2E testing in staging" >> $GITHUB_STEP_SUMMARY
          echo "- **Staging Deployment**: Pre-production validation" >> $GITHUB_STEP_SUMMARY
          echo "- **Production Deployment**: Blue-Green deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Post-deployment Tests**: Production validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Blue-Green Strategy:" >> $GITHUB_STEP_SUMMARY
          echo "- **Blue Environment**: Previous stable version" >> $GITHUB_STEP_SUMMARY
          echo "- **Green Environment**: New deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Traffic Switch**: Automatic after validation" >> $GITHUB_STEP_SUMMARY
          echo "- **Rollback**: Instant switch back to Blue if needed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Environments:" >> $GITHUB_STEP_SUMMARY
          echo "- **Staging**: https://staging.examen-ci-cd.vercel.app" >> $GITHUB_STEP_SUMMARY
          echo "- **Production**: https://examen-ci-cd.vercel.app" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pipeline Status: **SUCCESS**" >> $GITHUB_STEP_SUMMARY
